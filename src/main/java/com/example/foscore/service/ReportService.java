package com.example.foscore.service;

import com.example.fosauth.model.entity.User;
import com.example.fosauth.service.UserService;
import com.example.foscore.model.entity.Order;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import static java.lang.String.*;

@Service
@RequiredArgsConstructor
public class ReportService {

    @Async("taskExecutor")
    public byte[] makeReport() {
        Document document = new Document();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        try {
            PdfWriter.getInstance(document, outputStream);
            document.open();

            this.generatePdf(document);

            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return outputStream.toByteArray();
    }

    private void generatePdf(Document document) throws DocumentException {
        Paragraph preface = new Paragraph();

        preface.add(new Paragraph("FOS", catFont));
        document.add(Chunk.NEWLINE);

        preface.add(
            new Paragraph(
            "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), smallBold
            )
        );

        document.add(Chunk.NEWLINE);
        document.add(preface);

        PdfPTable table = this.createTable();
        document.add(table);
    }

    private PdfPTable createTable() {
        List<User> topTenUsers = this.userService.getTopTenUsers();

        PdfPTable table = new PdfPTable(3);

        PdfPCell usernameCell = new PdfPCell(new Phrase("username"));
        usernameCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(usernameCell);

        PdfPCell ordersPerMonthCell = new PdfPCell(new Phrase("orders/month"));
        ordersPerMonthCell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(ordersPerMonthCell);

        PdfPCell avgCostPerMonth = new PdfPCell(new Phrase("avg cost/month"));
        avgCostPerMonth.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(avgCostPerMonth);

//        PdfPCell percentOfTotalOrders = new PdfPCell(new Phrase("% of orders"));
//        percentOfTotalOrders.setHorizontalAlignment(Element.ALIGN_CENTER);
//        table.addCell(percentOfTotalOrders);

        table.setHeaderRows(1);

        try (ExecutorService executorService = Executors.newFixedThreadPool(5)) {
            List<Future<List<String>>> futures = new ArrayList<>();

            for (User user : topTenUsers) {
                futures.add(
                    executorService.submit(() -> this.processUserOrders(user))
                );
            }

            futures.forEach(future -> {
                try {
                    List<String> row = future.get();
                    row.forEach(table::addCell);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });

            executorService.shutdown();
        }
        return table;
    }

    @Transactional(readOnly = true)
    private List<String> processUserOrders(User user) {
        List<Order> orderList = this.orderService.getOrdersForCurrentMonth(user.getId());

        double ordersCost = orderList.stream()
            .mapToDouble(Order::getTotalPrice)
            .sum();

        int ordersSize = orderList.size();
        double avgCost = ordersSize == 0 ? 0 : (ordersCost / ordersSize);

        return List.of(
            user.getUsername(),
            valueOf(ordersSize),
            format("%.2f", avgCost)
        );
    }

    private final UserService userService;
    private final OrderService orderService;

    private static final Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static final Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
}
